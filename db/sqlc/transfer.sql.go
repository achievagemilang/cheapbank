// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_acc_id,
    to_acc_id,
    amount,
    currency
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, amount, currency, from_acc_id, to_acc_id, created_at
`

type CreateTransferParams struct {
	FromAccID int64    `json:"from_acc_id"`
	ToAccID   int64    `json:"to_acc_id"`
	Amount    float64  `json:"amount"`
	Currency  Currency `json:"currency"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.FromAccID,
		arg.ToAccID,
		arg.Amount,
		arg.Currency,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.FromAccID,
		&i.ToAccID,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, amount, currency, from_acc_id, to_acc_id, created_at FROM transfers 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.FromAccID,
		&i.ToAccID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, amount, currency, from_acc_id, to_acc_id, created_at FROM transfers
WHERE
    from_acc_id = $1 OR
    to_acc_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	FromAccID int64 `json:"from_acc_id"`
	ToAccID   int64 `json:"to_acc_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.FromAccID,
		arg.ToAccID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.FromAccID,
			&i.ToAccID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
